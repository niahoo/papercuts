(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.util = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

exports.push = push;
exports.after = after;
exports.delay = delay;
exports.different = different;
exports.same = same;
exports.subSame = subSame;
exports.rPropsChanged = rPropsChanged;
exports.rPropChanged = rPropChanged;
exports.rStateChanged = rStateChanged;
exports.rChanged = rChanged;
exports.simpleSorter = simpleSorter;
exports.sort = sort;
exports.sortBy = sortBy;
exports.getIn = getIn;
exports.sameIn = sameIn;
exports.sameInAll = sameInAll;
exports.deduper = deduper;
exports.pretty = pretty;
exports._return = _return;
exports.get = get;
exports.inspector = inspector;
exports.mutmap = mutmap;
exports.strf = strf;
exports.xor = xor;
// immutable util

function push(array, item) {
	return array.concat(item);
}

var spawn = typeof setImmediate === 'function' ? setImmediate : function (fn) {
	return setTimeout(fn, 1);
};

function after(timeout, fn) {
	// return (timeout > 0) ? setTimeout(fn, timeout) : setImmediate(fn)
	return timeout > 0 ? setTimeout(fn, timeout) : spawn(fn);
}

/**
 * A wait function to delay promises execution :
 * somePromise
 * 	.then(delay(100))
 * 	.then(function(data){
 *    // handle result from somePromise
 * 	})
 *
 * @param      {integer}   timeout  The timeout
 * @return     {Promise}
 */
function delay() {
	var timeout = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;

	return function () {
		for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
			args[_key] = arguments[_key];
		}

		return new Promise(function (ok) {
			after(timeout, function () {
				return ok.apply(undefined, args);
			});
		});
	};
}

function different(a, b) {
	return a !== b;
}

function same(a, b) {
	return !different(a, b);
}

function subSame(a, b, k) {
	return same(a[k], b[k]);
}

// React component props
function rPropsChanged(nextProps) {
	return different(this.props, nextProps);
}

// React component prop sub
function rPropChanged(propName) {
	return function (nextProps) {
		return different(this.props[propName], nextProps[propName]);
	};
}

// React component state
function rStateChanged(_nextProps, nextState) {
	return different(this.state, nextState);
}

// React component props & state
function rChanged(nextProps, nextState) {
	return different(this.props, nextProps) || different(this.state, nextState);
}

function simpleSorter(a, b) {
	return a < b ? -1 : a > b ? 1 : 0;
}

// Seamless Immutable sort
function sort(array) {
	var comparator = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : simpleSorter;

	if (array.asMutable) {
		array = array.asMutable();
	} else {
		array = array.slice();
	}
	return array.sort(comparator);
}

function sortBy(fn) {
	return function (a, b) {
		return simpleSorter(fn(a), fn(b));
	};
}

sortBy.key = function (k) {
	return sortBy(function (o) {
		return o[k];
	});
};

function getIn() {
	for (var _len2 = arguments.length, path = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
		path[_key2] = arguments[_key2];
	}

	/**
  * if one array is provided, it's the path. Else, the arguments list is the
  * path
  */
	if (Array.isArray(arguments[0])) {
		path = arguments[0];
	}
	return function (object) {
		// (!= null) works with undefined too
		var i = void 0,
		    len = void 0;
		for (i = 0, len = path.length; i < len && object != null; i++) {
			object = object[path[i]];
		}
		// check if we ran all the path
		return i === len ? object : void 0;
	};
}

// React Redux Connect comparator for seamless immutable state
function sameIn(path) {
	var getter = getIn(path);
	return function (objectA, objectB) {
		return same(getter(objectA), getter(objectB));
	};
}

function sameInAll() {
	for (var _len3 = arguments.length, paths = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
		paths[_key3] = arguments[_key3];
	}

	return function (objectA, objectB) {
		var i = void 0,
		    len = void 0;
		for (i = 0, len = paths.length; i < len; i++) {
			var comp = sameIn(paths[i]);
			var _same = comp(objectA, objectB);
			if (!_same) {
				return false;
			}
		}
		return true;
	};
}

function deduper() {
	var pool = [];
	return function (key, value) {
		if ((typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object') {
			if (pool.indexOf(value) === -1) {
				pool.push(value);
				return value;
			} else {
				// Already seen
				return "__RECURSION__";
			}
		} else {
			return value;
		}
	};
}

function pretty(value) {
	var indent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '  ';

	return JSON.stringify(value, deduper(), indent);
}

function _return(x) {
	return x;
}

function get(k) {
	return function (o) {
		return o[k];
	};
}

function inspector() {
	for (var _len4 = arguments.length, args = Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {
		args[_key4 - 1] = arguments[_key4];
	}

	var msg = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';

	msg = 'INSPECT ' + msg;
	return function (value) {
		var _console$info;

		(_console$info = console.info).call.apply(_console$info, [console, msg].concat(args));
		console.debug(value);
		return value;
	};
}

function mutmap(ar, fn) {
	var res = [];
	ar.forEach(function (x, i, a) {
		return res.push(fn(x, i, a));
	});
	return res;
}

function strf(format) {
	for (var _len5 = arguments.length, args = Array(_len5 > 1 ? _len5 - 1 : 0), _key5 = 1; _key5 < _len5; _key5++) {
		args[_key5 - 1] = arguments[_key5];
	}

	return format.replace(/%s/g, function () {
		return args.shift();
	});
}

function xor(a, b) {
	return a && !b || !a && b;
}

var k = exports.k = function k(val) {
	return function () {
		return val;
	};
};

},{}]},{},[1])(1)
});